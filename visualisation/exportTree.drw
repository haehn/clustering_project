# a few functions:

nleaves := proc( t:Tree )
if type(t,Leaf) then 1 else procname(t[1]) + procname(t[3]) fi end:

leaves := proc( t:Tree )
if type(t,Leaf) then {t[1]} else remember(procname(t[1])) union
        remember(procname(t[3])) fi end:

GetEdgeSplits := proc(t:Tree)
    GetEdgeSplitsR := proc(t:Tree)
        global allLeaves;                          
        p1 := leaves(t[Right]) union leaves(t[Left]);    
        p2 := allLeaves minus p1;                              
        if length(p1) = 1 or length(p2) = 1 then               
            p := NULL;                                         
        else                                                   
            p := {p1,p2};                     
        fi;                                                    
        r := If(not type(t[Right], Leaf), GetEdgeSplitsR(t[Right]), {}); 
        l := If(not type(t[Left], Leaf), GetEdgeSplitsR(t[Left]), {});   
        return([p, op(r), op(l)]);                             
    end:                                                       

    allLeaves := leaves(t);
    p1 := leaves(t[Right]);
    p2 := allLeaves minus p1;
    if length(p1) = 1 or length(p2) = 1 then               
        p := NULL;                                         
    else                                                   
        p := {p1,p2};                     
    fi;                                                    
    r := If(not type(t[Right], Leaf), GetEdgeSplitsR(t[Right]), {}); 
    l := If(not type(t[Left], Leaf), GetEdgeSplitsR(t[Left]), {});   
    return([p, op(r), op(l)]);                             
end:


Tree2Graph := proc( t:Tree, class:posint, nGenes:posint )                             
   global __E,__N,__T,__L,__n,__ne;
   r := [];                                                       
   __E := Edges();
   __n := length(leaves(t));
   __N := Nodes(seq(i,i=1..2*__n-2)); 
   __L := CreateArray(1..__n); 
   __ne := 0;
   # array of tripartitions
   __T := CreateArray(1..2*__n-2);
   # array of classes
   K := CreateArray(1..2*__n-2,[]);
   for i to length(K) do K[i] := copy([class]); od;

   Tree2GraphR := proc( t, above, nGenes )                         
     global __E,__N,__T,__L,__n,__ne;
     if type(t,Leaf) then 
         __ne := __ne+1; 
         __T[__ne] := copy(above);
         __L[__ne] := t[Label];
         return(__ne);
     else                            
         n := __n := __n+1;
         l1 := remember(leaves(t[1]));                                
         l3 := remember(leaves(t[3]));                                
         __T[__n] := {l1,l3,above};
         n1 := procname(t[1], l3 union above, nGenes);
         __E := append(__E,Edge(|t[2]-t[1,2]|,n,n1,nGenes));
         n3 := procname(t[3], l1 union above, nGenes);
         __E := append(__E,Edge(|t[2]-t[3,2]|,n,n3,nGenes));
         return(n);
      fi;
   end;                                                           

   n1 := Tree2GraphR( t[1], remember(leaves(t[3])), nGenes );            
   n3 := Tree2GraphR( t[3], remember(leaves(t[1])), nGenes );            
   __E := append(__E, Edge(|2*t[2]-t[1,2]-t[3,2]|,n1,n3,nGenes));
   return([Graph(__E,__N),__L,__T,K]);
end:                           

cmp := (a,b) -> {a,b};

# back to work:

MergeGraphs := proc(in1,in2) 
    if sort(in1[2]) <> sort(in2[2]) then
        error('Trees should be have same leaf sets');
    fi;
    n := length(in1[2]);
    G1 := in1[1];
    L1 := in1[2];
    T1 := in1[3];
    lt1 := length(T1);
    G2 := in2[1];
    L2 := in2[2];
    T2 := in2[3];
    K2 := in2[4];
    newK1 := copy(in1[4]);
    lt2 := length(T2);
    # look for matching topologies by sorting, then doing a linear scan
    # with 2 pointers
    oT1 := sort([seq(i,i=1..lt1)],x->T1[x]);
    oT2 := sort([seq(i,i=1..lt2)],x->T2[x]);
    matched2 := CreateArray(1..lt2,0);
    p1 := p2 := 1;
    while p1 <= lt1 and p2 <= lt2 do
        if T1[oT1[p1]] = T2[oT2[p2]] then
            matched2[oT2[p2]] := oT1[p1];
            # keep track of the classes mapped by merged node
            newK1[oT1[p1]] := append(newK1[oT1[p1]],op(K2[oT2[p2]]));
            p1 := p1+1;
            p2 := p2+1;
        elif cmp(T1[oT1[p1]],T2[oT2[p2]])[1] = T1[oT1[p1]] then
            p1 := p1+1;
        else
            p2 := p2+1;
        fi
    od;

    # store new edges and old nodes
    cNode := length(G1[2]);
    newEdges1 := [];
    newT1 := copy(T1);
    for e in G2[1] do 
        tmp := copy(e);
        if matched2[tmp[2]] = 0 then 
            cNode := cNode + 1;
            matched2[tmp[2]] := cNode;
            newT1 := append(newT1,T2[tmp[2]]);
            newK1 :- append(newK1,copy(K2[tmp[2]]));
            tmp[2] := cNode;
        else
            tmp[2] := matched2[tmp[2]]; 
        fi;
        if matched2[tmp[3]] = 0 then 
            cNode := cNode + 1;
            matched2[tmp[3]] := cNode;
            newT1 := append(newT1,T2[tmp[3]]);
            newK1 :- append(newK1,copy(K2[tmp[3]]));
            tmp[3] := cNode;
        else
            tmp[3] := matched2[tmp[3]]; 
        fi;
        newEdges1 := append(newEdges1,tmp);
    od;

    newG := copy(G1);
    newG[1] := Edges(op(newG[1]),op(newEdges1));

    # rewrite edges in canonical form to ensure unique sorting:
    for i to length(newG[1]) do
        if newG[1,i,2] > newG[1,i,3] then 
            t := newG[1,i,2]; 
            newG[1,i,2] := newG[1,i,3]; 
            newG[1,i,3] := t;
        fi;
    od;
    newG[1] := Edges(op(sort([op(newG[1])],x->[x[2],x[3]])));
    newG[2] := Nodes(seq(i,i=1..cNode));

    # merge duplicated edges
    keep := CreateArray(1..length(newG[1]),true);
    for i from 2 to length(newG[1]) do 
        if newG[1,i,2] = newG[1,i-1,2] and newG[1,i,3] = newG[1,i-1,3] then
            keep[i] := false;
            # new length is weighted average
            newG[1,i-1,1] := (newG[1,i-1,4]*newG[1,i-1,1]+
                              newG[1,i,4]*newG[1,i,1])
                             /(newG[1,i-1,4]+newG[1,i,4]);
            # new size is sum of two
            newG[1,i-1,4] := newG[1,i-1,4]+newG[1,i,4];
        fi;
    od;
    newG[1] := Edges(seq(If(keep[i],newG[1,i],NULL),i=1..length(newG[1])));
    return([newG,in1[2],newT1,newK1]);
end;

GraphToD3 := proc(G:Graph;(l=[]):array,(K=[]):array(array(posint)))
    if not op(G['Nodes']) = seq(i,i=1..length(G['Nodes'])) then
        error('Nodes ids must be a sequence of integers');
    fi;
    maxn := 0;
    for i in G['Edges'] do
        if length(i) <> 4 or not type(i[4],numeric) then
            error('Numeric 4th field required in all edges');
        else
            maxn := max(maxn,i[4]);
        fi;
    od;
    mynodes := [];
    for i to length(G['Nodes']) do
        mynodes := append(mynodes,
            sprintf('{"name":"%s","id":%d,"isLeaf":%s,"class":[%s]}',
                If(i<=length(l),l[i],'Node'.string(i-1)),
                i-1,
                If(i<=length(l),true,false),
                If(K<>[],ConcatStrings( sort(K[i]), ',' ),'1')
            )
        );
    od;
    myedges := [];
    darwinEdges := G['Edges'];
    for i to length(darwinEdges) do
        myedges := append(myedges,
            sprintf( '{"source":%d,"target":%d,"length":%.4g,"width":%.4g}',
                darwinEdges[i,2]-1,darwinEdges[i,3]-1,darwinEdges[i,1],(darwinEdges[i,4]/maxn) )
        );
    od;
    
    return(sprintf('{"nodes":[%s],\n"links":[%s],\n"legend":[%s]}',
        ConcatStrings( mynodes, ',\n' ),
        ConcatStrings( myedges, ',\n' ),
        ConcatStrings( K[1],    ','   )));
end:


##########################

files := SearchDelim('\n',TimedCallSystem('ls trees/*nwk')[2]);
K := length(files);
aT := CreateArray(1..K);
for i to K do
    aT[i] := ParseNewickTree(ReadRawFile(files[i]));
od;

g := Tree2Graph(aT[1],1,10);
for i from 2 to length(aT) do
    g := MergeGraphs(g,Tree2Graph(aT[i],i,10));
od:

OpenWriting('force/graph.json');
prints(GraphToD3(g[1],g[2],g[4]));
OpenWriting(previous);



