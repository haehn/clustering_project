#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import cPickle
import glob
import re
import shutil
from sequence_collection import SequenceCollection
from sequence_record import TCSeqRec




def extract(sc, n):
    d = sc.get_clusters()
    key = ('sym', 'ward', n)
    trees = [x.tree.pam2sps('sps2pam').newick for x in d[key].concats]
    lengths = []
    for member_list in d[key].members:
        l = [x.seqlength for x in member_list]
        lengths.append(l)
    total_lengths = [sum(x) for x in lengths]
    out_d = {}
    out_d['trees'] = trees
    out_d['lengths'] = lengths
    out_d['total_lengths'] = total_lengths
    out_d['n'] = n
    return out_d


def write_ALF_parameters(
    simulation_name,
    experiment_directory,
    simulation_directory,
    number_of_genes,
    gene_length,
    tree_file,
    output_filename='alf-params.drw',
    ):
    """ Function to write parameter files for ALF """

    import os
    alfsim_parameter_string = \
        '''# This parameter file has been generated by the ALF web service.
# To run the simulation on your own machine, download ALF from http://www.cbrg.ethz.ch/alf
# and call alfsim from the parent directory of this file.

webRequest := true;
uuid := '';

# name of simulation - you may want to change this
mname := {0};

# directories for file storage - you may want to change these
wdir := '{1}/{2}';
dbdir := 'DB/';
dbAncdir := 'DBancestral/';

# time scale for simulation (PAM is default)
unitIsPam := true:

# parameters concerning the root genome
realseed := false;
protStart := {3};
minGeneLength := {4};
gammaLengthDist := [1,1];
blocksize := 1:

# parameters concerning the substitution models
substModels := [SubstitutionModel('F84', [1, 1], [0.25,0.25,0.25,0.25], false)];
indelModels := [IndelModel(0)];
rateVarModels := [RateVarModel()];
modelAssignments := [1]:
modelSwitchS := [[1]]:
modelSwitchD := [[1]]:

# parameters concerning the species tree
treeType := 'Custom';
treeFile := '{5}';
'''.format(
        simulation_name,
        experiment_directory,
        simulation_directory,
        number_of_genes,
        gene_length,
        tree_file,
        )
    
    output = open(output_filename, 'w')
    output.write(alfsim_parameter_string)
    output.close()
    return alfsim_parameter_string

cwd = os.getcwd()
helper = os.environ['DARWINHELPER']
tmpdir = os.environ['TEMPORARY_DIRECTORY']

n = int(sys.argv[1])
simnumber = sys.argv[2]
sc = cPickle.load(file('yeast_jc69.pickle'))
name = '{0}to{1}'.format(n, n + 1)
cwd = os.getcwd()
if not os.path.isdir('{0}/simulations/{1}'.format(cwd,name)):
    os.mkdir('{0}/simulations/{1}'.format(cwd,name))
simdir = '{0}/simulations/{1}'.format(cwd,name)

d = extract(sc, n)
lengths = d['lengths']
total_lengths = d['total_lengths']
trees = d['trees']

helper = os.environ['DARWINHELPER']
tmpdir = os.environ['TEMPORARY_DIRECTORY']

input_directory = simdir
while input_directory.endswith('/'):
    input_directory = input_directory[:-1]
n = int(input_directory.split('to')[-1])-1



msa_directory = '{0}/MSA'.format(input_directory)
if not os.path.isdir(msa_directory):
    os.mkdir(msa_directory)
results_directory = '{0}/results'.format(input_directory)
if not os.path.isdir(results_directory):
    os.mkdir(results_directory)

if os.path.isfile('{0}/result{1}.pickle'.format(results_directory,simnumber)):
    sys.exit()

parameter_files = []
for i in range(len(total_lengths)):
    treefile = open('{0}/tree{1}.nwk'.format(simdir, i + 1), 'w')
    treefile.write(trees[i])
    treefile.close()
    adjusted_length = (total_lengths[i] + total_lengths[i]%3)/3
    write_ALF_parameters(
        'alfsim' + name + '_' + str(i + 1),
        tmpdir,
        'alftmp',
        1,
        adjusted_length,
        '{0}/tree{1}.nwk'.format(simdir, i + 1),
        '{0}/class{1}-params.drw'.format(tmpdir, i + 1),
        )
    parameter_files.append('{0}/class{1}-params.drw'.format(tmpdir,
                           i + 1))
    cPickle.dump(lengths[i],file('{0}/lengths{1}.pickle'.format(tmpdir,i+1),'w'))








sort_key = lambda item: tuple((int(num) if num else alpha) for (num,alpha) in re.findall(r'(\d+)|(\D+)', item))
parameter_files = sorted(glob.glob('{0}/*.drw'.format(tmpdir)),key=sort_key)
length_files = sorted(glob.glob('{0}/*.pickle'.format(tmpdir)),key=sort_key)
print parameter_files
print length_files

msas = []
k = 1
for i in range(len(parameter_files)):
    os.system('alfsim {0}'.format(parameter_files[i]))
    wdir = re.search(r"(?<=wdir := ')[\.\/\w]+",open(parameter_files[i]).read()).group()
    mname = re.search(r"(?<=mname := )(\w+)",open(parameter_files[i]).read()).group()
    simdir = '{0}/{1}/MSA'.format(wdir,mname)
    msa = TCSeqRec(glob.glob('{0}/*dna.fa'.format(simdir))[0])
    print msa
    msa.sort_by_name()
    headers = [x[:x.rindex('/')] for x in msa.headers]
    sequences = msa.sequences
    lengths = cPickle.load(file('{0}/lengths{1}.pickle'.format(tmpdir,i+1)))
    for j in range(len(lengths)):
        start = sum(lengths[:j])
        end = sum(lengths[:j+1])
        new_sequences = [seq[start:end] for seq in sequences]
        newmsa = TCSeqRec(headers=headers, sequences = new_sequences, name = 'gene{0:0>3}'.format(k))
        k+=1
        newmsa.write_fasta(outfile='{0}/{1}.fas'.format(msa_directory,newmsa.name))

col = SequenceCollection(msa_directory, datatype='dna', helper=helper, tmpdir=tmpdir)
col.put_trees_parallel(program='phyml', model='JC69', datatype='nt', ncat=1)
col.put_partitions('sym', 'ward', [n,n+1])
col.put_clusters()
col.put_cluster_trees_parallel(program='phyml', model='JC69', datatype='nt', ncat=1)

cPickle.dump(col,file('{0}/result{1}.pickle'.format(results_directory,simnumber),'w'))
# shutil.rmtree('{0}/alftmp'.format(input_directory))

# print 'SCORES = ', col.get_clusters()[('sym','ward',n)].concats
