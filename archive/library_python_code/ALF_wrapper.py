#!/usr/bin/env python

def write_ALF_parameters(simulation_name, experiment_directory, 
    simulation_directory,  number_of_genes=20, min_gene_length=100, 
    number_of_species=20, mutation_rate=200, indels=True, bd_tree=True,
    gtr=False, custom_tree=False, output_filename="alf-params.drw"):
    """ Function to write parameter files for ALF """
    import os
    alfsim_parameter_string = '''# This parameter file has been generated by the ALF web service.
# To run the simulation on your own machine, download ALF from http://www.cbrg.ethz.ch/alf
# and call alfsim from the parent directory of this file.

webRequest := false;
uuid := '';

# name of simulation - you may want to change this
mname := {0};

# directories for file storage - you may want to change these
wdir := '{1}/{2}';
dbdir := 'DB/';
dbAncdir := 'DBancestral/';

# time scale for simulation (PAM is default)
unitIsPam := true:

# parameters concerning the root genome
realseed := false;
protStart := {3};
minGeneLength := {4};
gammaLengthDist := [3, 133.8063];
blocksize := 1:

# parameters concerning the substitution models
substModels := [SubstitutionModel('WAG')];
indelModels := [IndelModel(0.00001, ZIPF, [1.821], 10)];
rateVarModels := [RateVarModel()];
modelAssignments := [1]:
modelSwitchS := [[1]]:
modelSwitchD := [[1]]: '''.format( simulation_name, experiment_directory, simulation_directory, number_of_genes, min_gene_length)
    bd_tree_string = '''

# parameters concerning the species tree
treeType := 'BDTree';
birthRate := 0.01;
deathRate := 0.001;
NSpecies := {0};
ultrametric := false;
mutRate := {1};
scaleTree := false; '''.format( number_of_species, mutation_rate )
    user_tree_string = '''
# parameters concerning the species tree
treeType := 'Custom';
treeFile := '{0}'; '''.format( custom_tree )

    if not indels:
        alfsim_parameter_string = alfsim_parameter_string.replace("indelModels := [IndelModel(0.0001, ZIPF, [1.821], 10)];\n","")
    if gtr: 
        alfsim_parameter_string = alfsim_parameter_string.replace("[SubstitutionModel('WAG')];","substModels := [SubstitutionModel('GTR', [14.9, 1.42, 1, 3.04, 2.44, 8.46], [0.31,0.18,0.21,0.30], false)];")
    if bd_tree:
        alfsim_parameter_string += bd_tree_string
    if custom_tree:
        alfsim_parameter_string += user_tree_string
    if output_filename:
        if os.path.isfile(output_filename):
            write=raw_input("Output file '{0}' exists, overwrite (y/n)?: ".format(output_filename))
        else: write = 'y'
        if write == 'y':
            output = open(output_filename, 'w')
            output.write(alfsim_parameter_string)
            output.close()
    return alfsim_parameter_string


def run_ALF(parameters,quiet=False):
    """ Function to run ALF from parameter file """
    import os
    
    if os.path.isfile(parameters):
        if quiet: 
            os.system("alfsim {0} > /dev/null 2> /dev/null".format(parameters))
        else: 
            os.system("alfsim {0}".format(parameters))
    else: print "Can't find file '{0}'".format(parameters)
